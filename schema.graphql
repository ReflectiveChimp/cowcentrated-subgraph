##################################
##### Common dimensions ##########
##################################

"""
A user of the protocol.
A user is a unique address that interacts with the protocol, but not necessarily a unique person.
All users are identified by their address, wether they are an investor, strategist or harvester.
"""
type UserAccount @entity {
  "The user address"
  id: Bytes!

  "The timestamp of the last transaction the user was involved in"
  lastInteractionTimestamp: BigInt!

  "Total amount of seconds the user has been active in the protocol"
  investedDuration: BigInt!

  "Current position value in USD as the sum of all user ongoing positions"
  totalPositionValueUSD: BigDecimal!

  """
  Current time-weighted position value in USD.
  This is the amount of seconds times the position value has been active.
  """
  timeWeightedPositionValueUSD: BigDecimal!

  "The transactions count that the user was the sender of"
  interactionsCount: Int!

  "All user beefy positions"
  userPositions: [UserPosition!]! @derivedFrom(field: "user")
  "All user transactions in beefy"
  transactions: [Transaction!]! @derivedFrom(field: "sender")
}

"""
A token is a representation of a fungible asset on the blockchain
as specified by the ERC20 standard.
"""
type Token @entity {
  # token address
  id: Bytes!

  "The token symbol"
  symbol: String
  "The token name"
  name: String
  "The number of decimals the token uses"
  decimals: Int!
}

"""
A transaction is a record of an event that happened on the blockchain.
Transactions are identified by their hash.
"""
type Transaction @entity {
  "The transaction hash"
  id: Bytes!

  "The block number the transaction was included in"
  blockNumber: BigInt!
  "The timestamp of the block the transaction was included in"
  blockTimestamp: BigInt!

  "The sender of the transaction"
  sender: UserAccount!

  "Gas fee paid for the transaction in the native token"
  gasFee: BigDecimal!
}

#########################
##### Protocol Data #####
#########################

"""
The Protocol entity is the main entity of the Beefy Finance subgraph.
It represents the Beefy Finance protocol.
This is where all stats and data about the protocol is stored.
"""
type Protocol @entity {
  """
  The protocol identifier:
  - 1: BeefyCL
  """
  id: String!

  "Protocol name"
  name: String!

  "The current TVL in the protocol in USD"
  totalValueLockedUSD: BigDecimal!

  "The current number of active vaults in the protocol"
  activeVaultCount: Int!
  "The current number of invested users in the protocol"
  activeUserCount: Int!
  "The number of transactions that ever happened in the protocol"
  transactionCount: Int!

  "A timeseries of the protocol's stats"
  snapshots: [ProtocolSnapshot!]! @derivedFrom(field: "protocol")
}

"""
A snapshot of the protocol's stats.
Any event that happens in the protocol is recorded in a snapshot.
We keep multiple snapshots time frames as noted by the "period" field.
Snapshots include: daily, weekly, monthly, yearly.
"""
type ProtocolSnapshot @entity {
  "protocol.id + period + timestamp"
  id: Bytes!

  "The protocol the snapshot is for"
  protocol: Protocol!

  "Duration of the snapshot period in seconds"
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!

  "Value locked in the protocol in USD at the time of the snapshot"
  totalValueLockedUSD: BigDecimal!

  "Number of vaults in the protocol at the time of the snapshot"
  activeVaultCount: Int!
  "Number of users in the protocol at the time of the snapshot"
  activeUserCount: Int!
  "Number of users interacting with the protocol for the first time at the time of the snapsho"
  newUserCount: Int!

  "Total number of transactions in the protocol at the time of the snapshot"
  totalTransactionCount: Int!
  "Number of transactions initiated by investors at the time of the snapshot"
  investorTransactionsCount: Int!
  "Number of transactions initiated by harvesters at the time of the snapshot"
  harvesterTransactionsCount: Int!

  "Total amount of gas spent by anyone at the time of the snapshot"
  totalGasSpent: BigDecimal!
  "Total amount of gas spent by anyone in USD at the time of the snapshot"
  totalGasSpentUSD: BigDecimal!
  "Total amount of gas spent by investors at the time of the snapshot"
  investorGasSpent: BigDecimal!
  "Total amount of gas spent by investors in USD at the time of the snapshot"
  investorGasSpentUSD: BigDecimal!
  "Total amount of gas spent by harvesters at the time of the snapshot"
  harvesterGasSpent: BigDecimal!
  "Total amount of gas spent by harvesters in USD at the time of the snapshot"
  harvesterGasSpentUSD: BigDecimal!

  """
  Total amount of gas saved by the protocol at the time of the snapshot.
  Each time an harvest transaction is executed, this value is increased by the amount of gas saved.
  Gas saved is equal the the number of gas units that would have been spent if the transaction was executed on-chain
  by each user instead of using the Beefy Finance protocol.
  It is expressed in native token.
  """
  protocolGasSavedNative: BigDecimal!
  "Total amount of gas saved by the protocol in USD at the time of the snapshot"
  protocolGasSavedUSD: BigDecimal!

  "Amount of fees collected by the protocol in the native token at the time of the snapshot"
  protocolFeesCollectedNative: BigDecimal!
  "Total amount of fees collected by the protocol in USD at the time of the snapshot"
  protocolFeesCollectedUSD: BigDecimal!

  "Harvest incentive fees collected by the protocol in the native token at the time of the snapshot"
  harvesterFeesCollectedNative: BigDecimal!
  "Total amount of harvest incentive fees collected by the protocol in USD at the time of the snapshot"
  harvesterFeesCollectedUSD: BigDecimal!

  "Strategist incentive fees collected by the protocol in the native token at the time of the snapshot"
  strategistFeesCollectedNative: BigDecimal!
  "Total amount of strategist incentive fees collected by the protocol in USD at the time of the snapshot"
  strategistFeesCollectedUSD: BigDecimal!

  "Zap fees collected by the protocol in the native token at the time of the snapshot"
  zapFeesCollectedNative: BigDecimal!
  "Total amount of zap fees collected by the protocol in USD at the time of the snapshot"
  zapFeesCollectedUSD: BigDecimal!
}

#############################
##### CL Vault Contracts ####
#############################

enum VaultLifecycle {
  "The vault is in the process of being initialized"
  INITIALIZING
  "The vault is able to accept deposits and earn yield"
  RUNNING
  "A vault can be paused for a variety of reasons, this is always to protect users funds"
  PAUSED
}

type BeefyCLVault @entity {
  "The vault address"
  id: Bytes!

  "Protocol the vault belongs to"
  protocol: Protocol!

  "The transaction that created the vault"
  createdWith: Transaction!

  "Current owner of the vault. The owner has additional permissions to manage the vault."
  owner: UserAccount!
  "The token data of the vault. The vault is also an ERC20 token. This tokens represents the shares of the vault."
  sharesToken: Token!
  "The strategy of the vault. The strategy is responsible for managing the vault's assets."
  strategy: BeefyCLStrategy!

  "The underlying tokens contained in the vault. This is the first token."
  underlyingToken0: Token!
  "The underlying tokens contained in the vault. This is the second token."
  underlyingToken1: Token!

  "The current TVL in the vault in USD"
  totalValueLockedUSD: BigDecimal!

  "Technical field to remember if the vault was already initialized"
  isInitialized: Boolean!

  "The current lifecycle status of the vault"
  lifecycle: VaultLifecycle!

  "All user positions in the vault"
  positions: [UserPosition!]! @derivedFrom(field: "vault")

  "Snapshot of the vault's stats"
  snapshots: [BeefyCLVaultSnapshot!]! @derivedFrom(field: "vault")
}

"""
A snapshot of the vault's stats.
Any event that happens in the vault is recorded in a snapshot.
We keep multiple snapshots time frames as noted by the "period" field.
Snapshots include: daily, weekly, monthly, yearly.
"""
type BeefyCLVaultSnapshot @entity {
  "vault.id + period + timestamp"
  id: Bytes!

  "The vault the snapshot is for"
  vault: BeefyCLVault!

  "Duration of the snapshot period in seconds"
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!

  "Amount of underlying tokens in the vault. This is the first token."
  underlyingAmount0: BigDecimal!
  "Amount of underlying tokens in the vault. This is the second token."
  underlyingAmount1: BigDecimal!

  "Amount of underlying tokens in the vault in USD. This is the first token."
  underlyingAmount0USD: BigDecimal!
  "Amount of underlying tokens in the vault in USD. This is the second token."
  underlyingAmount1USD: BigDecimal!

  "The current TVL in the vault in USD"
  totalValueLockedUSD: BigDecimal!

  "Total count of harvests for that vault"
  harvestCount: Int!
  "Deposit count for that vault"
  depositCount: Int!
  "Withdraw count for that vault"
  withdrawCount: Int!
  "Transfer count for that vault"
  transferCount: Int!

  "The harvested amount of the first token"
  harvestedAmount0: BigDecimal!
  "The harvested amount of the second token"
  harvestedAmount1: BigDecimal!

  "The harvested amount of the first token in USD"
  harvestedAmount0USD: BigDecimal!
  "The harvested amount of the second token in USD"
  harvestedAmount1USD: BigDecimal!

  "Amount of native token charged as call fee incentive"
  harvesterFeeAmountNative: BigDecimal!
  "Amount of native token charged as protocol fee"
  protocolFeeAmountNative: BigDecimal!
  "Amount of native token charged as strategist fee incentive"
  strategistFeeAmountNative: BigDecimal!

  "Amount of native token charged as call fee incentive in USD"
  harvesterFeeAmountUSD: BigDecimal!
  "Amount of native token charged as protocol fee in USD"
  protocolFeeAmountUSD: BigDecimal!
  "Amount of native token charged as strategist fee incentive in USD"
  strategistFeeAmountUSD: BigDecimal!
}

"""
A strategy is a contract that manages the assets of a vault.
This is mostly used to start tracking the events and link them to the vault.
"""
type BeefyCLStrategy @entity {
  "The strategy address"
  id: Bytes!

  "The vault the strategy is managing"
  vault: BeefyCLVault!

  "The transaction that created the strategy"
  createdWith: Transaction!

  "The owner of the strategy. The owner has additional permissions to manage the strategy."
  owner: UserAccount!

  "Technical field to remember if the strategy was already initialized"
  isInitialized: Boolean!
}

#######################
##### CL Incentive ####
#######################

"""
A vault incentive is a reward given to the investors of a vault.
The reward is given in a dedicated incentive token during a set period of time.
This is most commonly referred to as a "boost".
"""
type BeefyVaultIncentive @entity {
  "The vault address"
  id: Bytes!

  "The vault the incentive is for"
  vault: BeefyCLVault!

  "The transaction that created the vault incentive"
  createdWith: Transaction!

  "The token used for the incentive"
  incentiveRewardedIn: Token!

  "Amount of incentive tokens left to be distributed"
  incentiveAmount: BigDecimal!

  "The amount of incentive tokens distributed so far"
  claimedAmount: BigDecimal!
  "Amount of incentive tokens distributed so far in USD"
  claimedAmountUSD: BigDecimal!

  "All claims of the vault incentive"
  claims: [BeefyVaultIncentiveClaimEvent!]! @derivedFrom(field: "vaultIncentive")
}

"""
A vault incentive claim is a record of an investor claiming a vault incentive.
As incentives are time-released, investors can claim their share of the incentive at any time.
"""
type BeefyVaultIncentiveClaimEvent @entity {
  "The vault incentive claim id"
  id: Bytes!

  "The vault incentive the claim is for"
  vaultIncentive: BeefyVaultIncentive!

  "The user that claimed the incentive"
  user: UserAccount!

  "The transaction that created the vault incentive claim"
  createdWith: Transaction!

  "The amount of incentive tokens claimed"
  claimedAmount: BigDecimal!
}

###########################
##### CL User Position ####
###########################

type UserPosition @entity {
  "Vault address + user user address"
  id: Bytes!

  "The vault the user has a position in"
  vault: BeefyCLVault!
  "The user that has a position in the vault"
  user: UserAccount!
  "The transaction that created the user position"
  createdWith: Transaction!

  "The amount of shares the user holds"
  sharesBalance: BigDecimal!

  "The amount of first underlying tokens the user is entitled to"
  underlyingBalance0: BigDecimal!
  "The amount of second underlying tokens the user is entitled to"
  underlyingBalance1: BigDecimal!

  "The amount of first underlying tokens the user is entitled to in USD"
  underlyingBalance0USD: BigDecimal!
  "The amount of second underlying tokens the user is entitled to in USD"
  underlyingBalance1USD: BigDecimal!

  "Current position value in USD"
  positionValueUSD: BigDecimal!

  """
  Current time-weighted position value in USD.
  This is the amount of seconds times the position value has been active.
  """
  timeWeightedPositionValueUSD: BigDecimal!

  "Time that the position was last updated. Used to calculate the position's time-weighted size."
  lastUpdated: BigInt!
  "Total time the position has been active"
  totalActiveTime: BigInt!

  "All user position snapshots"
  snapshots: [UserPositionSnapshot!]! @derivedFrom(field: "userPosition")
}

"""
A snapshot of the user's position in a vault.
Any event that happens in the user's position is recorded in a snapshot.
We keep multiple snapshots time frames as noted by the "period" field.
Snapshots include: daily, weekly, monthly, yearly.
"""
type UserPositionSnapshot @entity {
  "userPosition.id + period + timestamp"
  id: Bytes!

  "The user position the snapshot is for"
  userPosition: UserPosition!

  "Duration of the snapshot period in seconds"
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!

  "The amount of shares the user holds"
  sharesBalance: BigDecimal!

  "The amount of first underlying tokens the user is entitled to"
  underlyingBalance0: BigDecimal!
  "The amount of second underlying tokens the user is entitled to"
  underlyingBalance1: BigDecimal!

  "The amount of first underlying tokens the user is entitled to in USD"
  underlyingBalance0USD: BigDecimal!
  "The amount of second underlying tokens the user is entitled to in USD"
  underlyingBalance1USD: BigDecimal!

  "Current position value in USD"
  positionValueUSD: BigDecimal!

  "Time that the position was last updated. Used to calculate the position's time-weighted size."
  lastUpdated: BigInt!
  "Total time the position has been active"
  totalActiveTime: BigInt!
}
